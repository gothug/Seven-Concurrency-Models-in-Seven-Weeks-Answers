? Check out William Pugh's Java memory model website.
    http://www.cs.umd.edu/~pugh/java/memoryModel/
    
? Acquaint yourself with the JSR 133 (Java memory model) FAQ.

http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html - although a bit outdated (e.g. C++ memory model - http://stackoverflow.com/questions/6319146/c11-introduced-a-standardized-memory-model-what-does-it-mean-and-how-is-it-g )


? What guarantees does the Java memory model make regarding initialization safety? Is it always necessary to use locks to safely publish objects between threads?

http://stackoverflow.com/questions/11306032/please-explain-initialization-safety-as-spelled-out-in-java-memory-model


? What is the double-checked locking anti-pattern? Why is it an anti-pattern?

http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html

? Experiment with the original, broken “dining philosophers” example. Try
modifying the length of time that philosophers think and eat and the
number of philosophers. What effect does this have on how long it takes
until deadlock? Imagine that you were trying to debug this and wanted
to increase the likelihood of reproducing the deadlock—what would you
do?

- Putting a sleep between the 2 synchronized blocks, pretty much guarantees deadlock very quickly. 
- Reducing the sleep time helps increase the probability of deadlock within a space of time
- Increase likelihood - increase time spent between acquiring locks

? What is AtomicIntegerFieldUpdater? How does it differ from AtomicInteger? When might you use it?

A reflection-based utility that enables atomic updates to designated volatile int fields of designated classes. This class is designed for use in atomic data structures in which several fields of the same node are independently subject to atomic updates.

https://sites.google.com/site/javaduka/code-examples/concurrency/cas/java-util-concurrent/atomicintegerfieldupdater - lighter weight than AtomicInteger when only have a few writers and lots of readers. Also can do more than just increment!

What would happen if the loop within the “dining philosophers” implementation
that uses condition variables was replaced with a simple if statement?
What failure modes might you see? What would happen if the call to signal()
was replaced by signalAll()? What problems (if any) would this cause?